import Head from 'next/head'
import { useState } from 'react'
import Link from 'next/link'
import Image from 'next/image'
import styles from '../../styles/Home.module.css'
import { fetchAllRepositories } from '../../services/repository/index.js';
import { TableBox } from '../presentational/TableBox'
import Searchbox from '../presentational/Searchbox'
import PaginatorBox from '../presentational/PaginatorBox'
import { mapItemsToTable } from '../../utils/mapItemsToTable'

export default function Home () {
  const [keyword, setKeyword] = useState('')
  const [repositories, setRepositories] = useState({
    items: []
  })
  const [loading, setLoading] = useState(false)
  const [currentPage, setCurrentPage] = useState(1)
  const [perPage, setPerPage] = useState(30)
  const [totalCount, setTotalCount] = useState(1)
  const [incompleteResults, setIncompleteResults] = useState(false)
  const [items, setItems] = useState([])

  function handleSubmit (target) {
    target.preventDefault()

    setLoading(true);

    fetchAllRepositories({ keyword, page: currentPage, perPage})
      .then(data => {
        //setRepositories(data)
        const { items, incomplete_results, total_count } = data;
        setItems(items);
        setIncompleteResults(incomplete_results)
        setTotalCount(total_count)
        setLoading(false)
      })
      .catch(error => {
        setLoading(false)
        console.log(error)
      })
  }

  function handleChange (event) {
    const { target } = event
    const { value } = target
    setKeyword(value || '')
  }

  function handleLimitChange(event) {
    const { target } = event
    const { value } = target

    setPerPage(value || 30)
  }

  function handlePageChange(event) {
    event.preventDefault()

    const { target } = event
    const { name } = target

    if (name == 'page_min_value') {
      setCurrentPage(1)
    }
    if (name == 'page_previous_value') {
      setCurrentPage(currentPage - 1)
    }
    if (name == 'page_next_value') {
      setCurrentPage(currentPage + 1)
    }
    if (name == 'page_max_value') {
      setCurrentPage(100)
    }
  }

  //const { items } = repositories;

  const tableData = items.length ? mapItemsToTable({ items }) : items;

  return (
    <div className={styles.container}>
      <Head>
        <title>Github Repository</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          <Link href="/">Github finder</Link>
        </h1>
        <Searchbox
          onSubmit={handleSubmit}
          onChange={handleChange}
          value={keyword}
        />

        {loading && (
          <div>Loading...</div>
        )}

        {!loading && tableData.length ? (
          <TableBox items={tableData} className={styles.TableBoxContainer} />
        ): (<div />)}

        {tableData.length ? (
          <PaginatorBox
            current={currentPage}
            limit={Math.floor(totalCount/perPage)}
            onLimitChange={handleLimitChange}
            onPageChange={handlePageChange}
            onSubmit={handleSubmit}
          />
        ): (<div />)}


      </main>

      <footer className={styles.footer}>
      </footer>
    </div>
  )
}
